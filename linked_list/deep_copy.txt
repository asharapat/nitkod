Desc:
You are given the head of a linked list of length n. Unlike a singly linked list, each node contains an additional pointer random, which may point to any node in the list, or null.
Create a deep copy of the list.
The deep copy should consist of exactly n new nodes, each including:
- The original value val of the copied node
- A next pointer to the new node corresponding to the next pointer of the original node
- A random pointer to the new node corresponding to the random pointer of the original node

Note: None of the pointers in the new list should point to nodes in the original list.
Return the head of the copied linked list.

Solution:
def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
    - init hashmap that maps original nodes to copy nodes in the first loop
    - in the second loop just assign corresponding nexts and randoms for copy nodes