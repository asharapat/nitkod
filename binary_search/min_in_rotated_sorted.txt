Desc:
You are given an array of length n which was originally sorted in ascending order. It has now been rotated between 1 and n times. For example, the array nums = [1,2,3,4,5,6] might become:
- [3,4,5,6,1,2] if it was rotated 4 times.
- [1,2,3,4,5,6] if it was rotated 6 times.
Notice that rotating the array 4 times moves the last four elements of the array to the beginning. Rotating the array 6 times produces the original array.
Assuming all elements in the rotated sorted array nums are unique, return the minimum element of this array.

Solution:
def findMin(self, nums: List[int]) -> int:
    - init l, r = 0, len(nums)-1 and mn = 1001
    - start bin search: m = (l+r)//2 and check mn = min(mn, nums[m])
    - if nums[m] is greater than right most element => search min elem at right: l = m + 1
    - else search min elem at left: r = m - 1